<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title>Calendarify - Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet"/>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1A2E29;
            color: #E0E0E0;
        }
        .primary-button {
            background-color: #34D399;
            color: #1A2E29;
        }
        .primary-button:hover {
            background-color: #2BB98A;
        }
        .secondary-button {
            border: 1px solid #34D399;
            color: #34D399;
        }
        .secondary-button:hover {
            background-color: #34D399;
            color: #1A2E29;
        }
        .date-picker-day.selected {
            background-color: #34D399;
            color: #1A2E29;
        }
        .time-slot.selected {
            background-color: #34D399;
            color: #1A2E29;
            border-color: #34D399;
            font-weight: bold;
        }
        .nav-link {
            color: #A3B3AF;
        }
        .nav-link:hover {
            color: #E0E0E0;
        }
        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 9999px;
            transition: all 0.2s ease;
        }
        .calendar-day:hover {
            background-color: #2C4A43;
        }
        .calendar-day.today {
            background-color: #F97316; /* Orange color */
            color: #1A2E29;
            font-weight: bold;
        }
        .calendar-day.selected {
            background-color: #34D399; /* Theme green color */
            color: #1A2E29;
            font-weight: bold;
        }
        .calendar-day.has-events {
            position: relative;
        }
        .calendar-day.has-events::after {
            content: '';
            position: absolute;
            bottom: 4px;
            width: 4px;
            height: 4px;
            background-color: #34D399;
            border-radius: 50%;
        }
        .calendar-day.unavailable {
            color: #555;
            pointer-events: none;
            opacity: 0.5;
        }
        .calendar-day.today.unavailable {
            background-color: #F97316; /* Keep orange background */
            color: #1A2E29;
            font-weight: bold;
            opacity: 0.7; /* More opaque than regular unavailable */
        }
        /* Custom scrollbar styling */
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #1A2E29;
            border-radius: 4px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #2C4A43;
            border-radius: 4px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #34D399;
        }
        
        /* Animation styles */
        .main-container {
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            overflow: visible;
            position: relative;
        }
        
        .main-container.extended {
            max-width: 8xl;
            transform: translateX(-140px);
        }
        
        .time-slots-container {
            opacity: 0;
            transform: translateX(-260px) scale(0.8);
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            max-height: 0;
            overflow: hidden;
            position: absolute;
            right: -260px;
            top: -2rem;
            bottom: -2rem;
            width: 260px;
            padding: 1rem;
            border-radius: 0 0.75rem 0.75rem 0;
            background-color: #1E3A34;
            z-index: 10;
            display: flex;
            flex-direction: column;
        }
        
        .time-slots-container.show {
            opacity: 1;
            transform: translateX(0) scale(1);
            max-height: none;
        }
        
        .main-content {
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }
        
        .calendar-section {
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            min-height: 400px;
        }
        
        .time-slot {
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.3s ease;
            background-color: #2C4A43;
            border: 1px solid #34D399;
            color: #E0E0E0;
        }
        
        .time-slot:hover {
            background-color: #34D399;
            color: #1A2E29;
        }
        
        .time-slot:nth-child(1) { transition-delay: 0.1s; }
        .time-slot:nth-child(2) { transition-delay: 0.15s; }
        .time-slot:nth-child(3) { transition-delay: 0.2s; }
        .time-slot:nth-child(4) { transition-delay: 0.25s; }
        .time-slot:nth-child(5) { transition-delay: 0.3s; }
        .time-slot:nth-child(6) { transition-delay: 0.35s; }
        .time-slot:nth-child(7) { transition-delay: 0.4s; }
        .time-slot:nth-child(8) { transition-delay: 0.45s; }
        .time-slot:nth-child(9) { transition-delay: 0.5s; }
        .time-slot:nth-child(10) { transition-delay: 0.55s; }
        .time-slot:nth-child(11) { transition-delay: 0.6s; }
        .time-slot:nth-child(12) { transition-delay: 0.65s; }
        .time-slot:nth-child(13) { transition-delay: 0.7s; }
        .time-slot:nth-child(14) { transition-delay: 0.75s; }
        .time-slot:nth-child(15) { transition-delay: 0.8s; }
        .time-slot:nth-child(16) { transition-delay: 0.85s; }
        .time-slot:nth-child(17) { transition-delay: 0.9s; }
        .time-slot:nth-child(18) { transition-delay: 0.95s; }
        .time-slot:nth-child(19) { transition-delay: 1s; }
        .time-slot:nth-child(20) { transition-delay: 1.05s; }
        .time-slot:nth-child(21) { transition-delay: 1.1s; }
        .time-slot:nth-child(22) { transition-delay: 1.15s; }
        .time-slot:nth-child(23) { transition-delay: 1.2s; }
        .time-slot:nth-child(24) { transition-delay: 1.25s; }
        .time-slot:nth-child(25) { transition-delay: 1.3s; }
        .time-slot:nth-child(26) { transition-delay: 1.35s; }
        .time-slot:nth-child(27) { transition-delay: 1.4s; }
        .time-slot:nth-child(28) { transition-delay: 1.45s; }
        .time-slot:nth-child(29) { transition-delay: 1.5s; }
        .time-slot:nth-child(30) { transition-delay: 1.55s; }
        .time-slot:nth-child(31) { transition-delay: 1.6s; }
        .time-slot:nth-child(32) { transition-delay: 1.65s; }
        
        /* Modal styling */
        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(4px);
        }
        
        .modal-content {
            background-color: #1E3A34;
            border: 1px solid #2C4A43;
            border-radius: 12px;
            max-height: 90vh;
            overflow-y: auto;
        }

        /* Confirmation modal animations */
        #bookingConfirmationModal {
            animation: fadeIn 0.3s ease-out;
        }

        #bookingConfirmationModal > div {
            animation: slideIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: scale(0.9) translateY(-20px);
            }
            to { 
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        /* Validation error modal animations */
        #validationErrorModal {
            animation: fadeIn 0.3s ease-out;
        }

        #validationErrorModal > div {
            animation: slideIn 0.3s ease-out;
        }
    </style>
</head>
<body class="flex flex-col min-h-screen">
    <header class="bg-[#111f1c] py-4 px-6 md:px-12">
        <div class="container mx-auto flex justify-between items-center">
            <div class="flex items-center">
                <span class="material-icons-outlined text-3xl text-[#34D399] mr-2">calendar_month</span>
                <h1 class="text-2xl font-bold text-white">Calendarify</h1>
            </div>
            <nav class="hidden md:flex items-center space-x-6">
                <a class="nav-link" href="/individuals">Individuals</a>
                <a class="nav-link" href="/teams">Teams</a>
                <a class="nav-link" href="/enterprise">Enterprise</a>
            </nav>
            <div class="flex items-center space-x-4">
                <div class="flex items-center gap-2">
                    <label for="clock-format-toggle" class="flex items-center gap-2 cursor-pointer select-none">
                        <span class="text-[#A3B3AF] text-sm">12h format</span>
                        <button id="clock-format-toggle" type="button" aria-pressed="false" class="w-12 h-7 bg-[#19342e] rounded-full relative cursor-pointer border border-[#34D399] transition-colors duration-300" onclick="toggleClockFormat()">
                            <div id="toggle-circle" class="w-6 h-6 bg-[#34D399] rounded-full absolute" style="top:1px; left:1px; transition:transform 0.3s, background-color 0.3s;"></div>
                        </button>
                    </label>
                </div>
                <button class="primary-button px-6 py-2 rounded-lg font-semibold text-sm">Sign up</button>
                <button class="text-sm nav-link">Log In</button>
            </div>
        </div>
    </header>

    <main class="flex-grow container mx-auto px-4 py-8 md:py-16">
        <div class="bg-[#1E3A34] p-8 rounded-xl shadow-2xl w-full max-w-6xl mx-auto main-container" id="mainContainer">
            <!-- Debug buttons (only show in development) -->
            <div class="mb-4 p-4 bg-yellow-900/20 border border-yellow-600/30 rounded-lg">
                <div class="flex flex-wrap gap-2">
                    <button onclick="reloadUserState()" class="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700">
                        🔄 Reload User State
                    </button>
                                    <button onclick="console.log('Current localStorage:', Object.fromEntries(Object.entries(localStorage).filter(([k]) => k.startsWith('calendarify-'))));" class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700">
                    📊 Log localStorage
                </button>
                    <button onclick="clearAvailabilityCache(); buildCalendar();" class="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700">
                        🗓️ Refresh Calendar
                    </button>
                    <button onclick="testTimeSlotGeneration();" class="bg-purple-600 text-white px-3 py-1 rounded text-sm hover:bg-purple-700">
                        🧪 Test Time Slots
                    </button>
                </div>
            </div>
            
            <div class="flex flex-col lg:flex-row lg:space-x-8 main-content" id="mainContent">
                <div class="lg:w-1/2">
                    <p class="text-sm text-gray-400">Book a meeting with <span id="username" class="text-[#34D399]"></span></p>
                    <h2 id="eventTitle" class="text-3xl font-bold text-white mt-1 mb-4"></h2>
                    <div class="flex items-center text-gray-400 mb-2">
                        <span class="material-icons-outlined mr-2">schedule</span>
                        <span>Manage your availability</span>
                    </div>
                    <div class="flex items-center text-gray-400">
                        <span class="material-icons-outlined mr-2">videocam</span>
                        <span>Set up your meeting preferences</span>
                    </div>
                </div>
                <div class="lg:w-1/2 mt-8 lg:mt-0 relative" id="calendarSection">
                    <div class="calendar-section" id="calendarContainer">
                        <h3 class="text-xl font-semibold text-white mb-4 text-center">Select a Date</h3>
                        <div class="bg-[#1A2E29] p-4 rounded-lg">
                            <div class="flex justify-between items-center mb-4">
                                <button id="prevMonth" class="p-2 rounded-full hover:bg-[#2C4A43]">
                                    <span class="material-icons-outlined text-gray-300">chevron_left</span>
                                </button>
                                <div id="currentMonth" class="text-lg font-medium text-white"></div>
                                <button id="nextMonth" class="p-2 rounded-full hover:bg-[#2C4A43]">
                                    <span class="material-icons-outlined text-gray-300">chevron_right</span>
                                </button>
                            </div>
                            <div id="calendar" class="grid grid-cols-7 gap-1 text-center"></div>
                        </div>
                        <button class="primary-button w-full py-3 rounded-lg font-semibold mt-6" id="confirmButton" style="opacity: 0.5; pointer-events: none;">
                            Confirm
                        </button>
                    </div>
                    <div id="timeSlots" class="time-slots-container">
                        <div class="flex flex-col h-full">
                            <div class="pt-4 pb--4">
                                <h4 id="selectedDate" class="text-lg font-medium text-white mb-4 text-center"></h4>
                            </div>
                            <div class="flex-1 overflow-y-auto space-y-2 pr-2 custom-scrollbar rounded-lg mb-4" id="timeSlotsContainer"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Booking Details Modal -->
    <div id="bookingModal" class="modal-backdrop fixed inset-0 z-50 hidden flex items-center justify-center p-4">
        <div class="modal-content w-full max-w-2xl p-6">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold text-white">Complete Your Booking</h3>
                <button id="closeBookingModal" class="text-gray-400 hover:text-white">
                    <span class="material-icons-outlined">close</span>
                </button>
            </div>
            
            <div class="space-y-6">
                <!-- Booking Summary -->
                <div class="bg-[#1A2E29] p-4 rounded-lg">
                    <h4 class="text-lg font-medium text-white mb-2">Booking Summary</h4>
                    <div class="text-gray-300">
                        <p><strong>Event:</strong> <span id="modalEventTitle"></span></p>
                        <p><strong>Date:</strong> <span id="modalEventDate"></span></p>
                        <p><strong>Time:</strong> <span id="modalEventTime"></span></p>
                        <p><strong>Duration:</strong> <span id="modalEventDuration"></span></p>
                    </div>
                </div>

                <!-- Contact Information -->
                <div id="contactInfoSection" class="hidden">
                    <h4 class="text-lg font-medium text-white mb-4">Contact Information</h4>
                    <div class="space-y-4">
                        <div id="nameField" class="hidden">
                            <label class="block text-[#A3B3AF] text-sm font-medium mb-2">Name *</label>
                            <input type="text" id="bookingName" class="w-full bg-[#19342e] border border-[#2C4A43] text-[#E0E0E0] rounded-lg px-4 py-3 focus:border-[#34D399] focus:ring-2 focus:ring-[#34D399] transition-colors" placeholder="Enter your name">
                        </div>
                        <div id="emailField" class="hidden">
                            <label class="block text-[#A3B3AF] text-sm font-medium mb-2">Email *</label>
                            <input type="email" id="bookingEmail" class="w-full bg-[#19342e] border border-[#2C4A43] text-[#E0E0E0] rounded-lg px-4 py-3 focus:border-[#34D399] focus:ring-2 focus:ring-[#34D399] transition-colors" placeholder="example@email.com">
                            <div id="emailError" class="text-red-400 text-sm mt-1 hidden">Please enter a valid email address</div>
                        </div>
                        <div id="phoneField" class="hidden">
                            <label class="block text-[#A3B3AF] text-sm font-medium mb-2">Phone Number</label>
                            <input type="tel" id="bookingPhone" class="w-full bg-[#19342e] border border-[#2C4A43] text-[#E0E0E0] rounded-lg px-4 py-3 focus:border-[#34D399] focus:ring-2 focus:ring-[#34D399] transition-colors" placeholder="+1 (555) 123-4567">
                            <div id="phoneError" class="text-red-400 text-sm mt-1 hidden">Please enter a valid phone number (7-15 digits)</div>
                        </div>
                        <div id="companyField" class="hidden">
                            <label class="block text-[#A3B3AF] text-sm font-medium mb-2">Company</label>
                            <input type="text" id="bookingCompany" class="w-full bg-[#19342e] border border-[#2C4A43] text-[#E0E0E0] rounded-lg px-4 py-3 focus:border-[#34D399] focus:ring-2 focus:ring-[#34D399] transition-colors" placeholder="Enter your company name">
                        </div>
                    </div>
                </div>

                <!-- Custom Questions -->
                <div id="questionsSection" class="hidden">
                    <h4 class="text-lg font-medium text-white mb-4">Additional Information</h4>
                    <div id="questionsContainer" class="space-y-4">
                        <!-- Questions will be dynamically added here -->
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex justify-end space-x-4 pt-4">
                    <button id="cancelBooking" class="secondary-button px-6 py-3 rounded-lg font-semibold">
                        Cancel
                    </button>
                    <button id="confirmBooking" class="primary-button px-6 py-3 rounded-lg font-semibold">
                        Confirm Booking
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Confirmation Modal -->
    <div id="bookingConfirmationModal" class="fixed inset-0 z-[70] hidden flex items-center justify-center p-4">
        <div class="bg-[#1E3A34] rounded-xl shadow-2xl p-8 max-w-md w-full mx-4">
            <div class="text-center">
                <!-- Success Icon -->
                <div class="mx-auto w-16 h-16 bg-[#34D399] rounded-full flex items-center justify-center mb-6">
                    <span class="material-icons-outlined text-white text-3xl">check</span>
                </div>
                
                <!-- Success Message -->
                <h3 class="text-xl font-bold text-white mb-4">Booking Confirmed!</h3>
                <p class="text-[#A3B3AF] mb-6">Your meeting has been successfully scheduled.</p>
                
                <!-- Booking Details -->
                <div class="bg-[#19342e] rounded-lg p-4 mb-6 text-left">
                    <div class="space-y-2">
                        <div class="flex justify-between">
                            <span class="text-[#A3B3AF]">Event:</span>
                            <span class="text-white font-medium" id="confirmationEventTitle"></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-[#A3B3AF]">Date:</span>
                            <span class="text-white font-medium" id="confirmationDate"></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-[#A3B3AF]">Time:</span>
                            <span class="text-white font-medium" id="confirmationTime"></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-[#A3B3AF]">Duration:</span>
                            <span class="text-white font-medium" id="confirmationDuration"></span>
                        </div>
                    </div>
                </div>
                
                <!-- Additional Info -->
                <p class="text-[#A3B3AF] text-sm mb-6">You will receive a confirmation email shortly with meeting details and calendar invite.</p>
                
                <!-- Action Button -->
                <button id="closeBookingConfirmationModal" class="bg-[#34D399] text-[#1A2E29] px-8 py-3 rounded-lg hover:bg-[#2C4A43] transition-colors font-bold w-full">
                    Done
                </button>
            </div>
        </div>
    </div>

    <footer class="py-8 text-center">
        <p class="text-xs text-gray-500">
            This is a demo application and is not intended for actual use. All functionality is for demonstration purposes only.
        </p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', async function() {
                                                                        
            const parts = window.location.pathname.split('/').filter(Boolean);
                        
            let display = '';
            let slug = '';
            if (parts.length >= 3 && parts[0] === 'booking') {
                display = decodeURIComponent(parts[1]);
                slug = parts[2];
                            } else {
                const params = new URLSearchParams(window.location.search);
                display = params.get('user') || '';
                slug = params.get('event') || '';
                            }
            if (!slug || !display) {
                                window.location.replace('/');
                return;
            }
            document.getElementById('username').textContent = display;
            
            window.API_URL = 'http://localhost:3001/api';
                                    
            let event;
            try {
                                                const res = await fetch(`${API_URL}/event-types/slug/${slug}`);
                                                
                if (!res.ok) {
                                        throw new Error('not found');
                }
                
                event = await res.json();
                                                
                if (!event) {
                    document.body.innerHTML = '<div class="text-center mt-20 text-red-500">Invalid event link</div>';
                    return;
                }
            } catch (e) {
                // Fallback to local data if API request fails
                                                                event = {
                    title: 'Demo Meeting',
                    name: 'Demo Meeting',
                    duration: 30,
                    bufferBefore: 0,
                    bufferAfter: 0,
                    advanceNotice: 0,
                    questions: '',
                    requiredFields: { name: true, email: true, phone: false, company: false }
                };
                            }

            try {
                const resState = await fetch(`${API_URL}/users/display/${display}/state`);
                if (resState.ok) {
                    const state = await resState.json();
                    
                    Object.entries(state).forEach(([k,v]) => {
                        localStorage.setItem(k, JSON.stringify(v));
                    });
                    
                    // Log the availability data specifically
                    if (state['calendarify-day-availability']) {
                    } else {
                    }
                    
                    // Try to get the complete event type data from the host's state
                    const eventTypes = JSON.parse(localStorage.getItem('calendarify-event-types') || '[]');
                    const completeEventType = eventTypes.find(et => et.slug === slug);
                    if (completeEventType) {
                        // Merge the complete data with the basic API data
                        event = { ...event, ...completeEventType };
                    }
                } else {
                }
            } catch (e) {
            }

            // Debug function to reload user state
            window.reloadUserState = async function() {
                try {
                    const resState = await fetch(`${API_URL}/users/display/${display}/state`);
                    if (resState.ok) {
                        const state = await resState.json();
                        
                        Object.entries(state).forEach(([k,v]) => {
                            localStorage.setItem(k, JSON.stringify(v));
                        });
                        
                        if (state['calendarify-day-availability']) {
                        }
                        
                        // Refresh the calendar
                        if (typeof buildCalendar === 'function') {
                            await buildCalendar();
                        }
                        
                        alert('User state reloaded successfully!');
                    } else {
                        alert('Failed to reload user state');
                    }
                } catch (e) {
                    alert('Error reloading user state: ' + e.message);
                }
            };

            // Function to fetch fresh availability data from backend
            async function fetchFreshAvailabilityData() {
                try {
                    // Get the event type's user display name from the event object
                    const displayName = event.user_display_name || 'admin';
                    const response = await fetch(`${API_URL}/users/display/${displayName}/state`);
                    
                    if (response.ok) {
                        const backendState = await response.json();
                        const freshWeeklyHours = backendState['calendarify-weekly-hours'] || {};
                        const freshDayAvailability = backendState['calendarify-day-availability'] || {};
                        
                        // Update localStorage with fresh data
                        localStorage.setItem('calendarify-weekly-hours', JSON.stringify(freshWeeklyHours));
                        localStorage.setItem('calendarify-day-availability', JSON.stringify(freshDayAvailability));
                        
                        return { weeklyHours: freshWeeklyHours, dayAvailability: freshDayAvailability };
                    } else {
                        console.error('Failed to fetch user state:', response.status, response.statusText);
                    }
                } catch (error) {
                    console.error('Failed to fetch from backend:', error);
                }
                return null;
            }

            // Load availability data (try backend first, fallback to localStorage)
            let weeklyHours = JSON.parse(localStorage.getItem('calendarify-weekly-hours') || '{}');
            let dayAvailability = JSON.parse(localStorage.getItem('calendarify-day-availability') || '{}');
            
            // If no data or empty data, try to fetch from backend
            if (!weeklyHours || Object.keys(weeklyHours).length === 0) {
                const freshData = await fetchFreshAvailabilityData();
                if (freshData) {
                    weeklyHours = freshData.weeklyHours;
                    dayAvailability = freshData.dayAvailability;
                } else {
                    // Fallback to default hours
                    const defaultHours = {
                        monday: { start: '09:00', end: '17:00' },
                        tuesday: { start: '09:00', end: '17:00' },
                        wednesday: { start: '09:00', end: '17:00' },
                        thursday: { start: '09:00', end: '17:00' },
                        friday: { start: '09:00', end: '17:00' }
                    };
                    weeklyHours = defaultHours;
                    localStorage.setItem('calendarify-weekly-hours', JSON.stringify(defaultHours));
                }
            }

            document.getElementById('eventTitle').textContent = `Book: ${event.title || event.name}`;

            const eventDuration = parseInt(event.duration) || 30;
            const bufferBefore = parseInt(event.bufferBefore) || 0;
            const bufferAfter = parseInt(event.bufferAfter) || 0;
            const advanceNotice = parseInt(event.advanceNotice) || 0;
                        
            let currentDate = new Date();
            let selectedDate = null;
            let selectedTime = null;
            let timeSlots = {};

            // --- 12h/24h Toggle Functionality ---
            async function toggleClockFormat() {
                const is12h = getClockFormat() === '12h';
                const newFormat = is12h ? '24h' : '12h';
                
                // Update format preference
                setClockFormat(newFormat);
                updateClockFormatUI();
                
                // Refresh time slots display with new format
                if (selectedDate) {
                    await displayTimeSlots();
                }
            }
            // Make toggleClockFormat available globally for onclick handler
            window.toggleClockFormat = toggleClockFormat;

            function getClockFormat() {
                let stored = localStorage.getItem('calendarify-booking-clock-format');
                if (!stored) {
                    localStorage.setItem('calendarify-booking-clock-format', '24h');
                    return '24h';
                }
                return stored;
            }

            // Helper function to convert local time to UTC
            function convertLocalTimeToUTC(timeStr) {
                const [hours, minutes] = timeStr.split(':').map(Number);
                
                // Create a date object for today and set the time in local timezone
                const today = new Date();
                const localDate = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hours, minutes, 0, 0);
                
                // Convert to UTC by subtracting timezone offset
                const utcDate = new Date(localDate.getTime() - (localDate.getTimezoneOffset() * 60000));
                
                // Return time string in UTC
                return `${utcDate.getUTCHours().toString().padStart(2, '0')}:${utcDate.getUTCMinutes().toString().padStart(2, '0')}`;
            }

            function setClockFormat(format) {
                localStorage.setItem('calendarify-booking-clock-format', format);
            }

            function updateClockFormatUI() {
                const is12h = getClockFormat() === '12h';
                const toggle = document.getElementById('clock-format-toggle');
                const circle = document.getElementById('toggle-circle');
                
                if (toggle && circle) {
                    toggle.setAttribute('aria-pressed', is12h ? 'true' : 'false');
                    toggle.classList.toggle('bg-[#34D399]', is12h);
                    toggle.classList.toggle('bg-[#19342e]', !is12h);
                    circle.style.transform = is12h ? 'translateX(20px)' : 'translateX(0)';
                    circle.style.backgroundColor = is12h ? '#fff' : '#34D399';
                }
            }

            // Converts time between formats, preserving the actual time
            function convertTimeFormat(value, fromFormat, toFormat) {
                if (!value || !/^\d{2}:\d{2}$/.test(value)) return value;
                
                let [hours, minutes] = value.split(':').map(Number);
                
                if (fromFormat === toFormat) {
                    return value; // No conversion needed
                }
                
                if (fromFormat === '24h' && toFormat === '12h') {
                    // Convert 24h to 12h
                    if (hours === 0) {
                        return `12:${minutes.toString().padStart(2, '0')}`;
                    } else if (hours > 12) {
                        return `${(hours - 12).toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
                    } else {
                        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
                    }
                } else if (fromFormat === '12h' && toFormat === '24h') {
                    // Convert 12h to 24h
                    if (hours === 12) {
                        return `12:${minutes.toString().padStart(2, '0')}`; // 12 PM
                    } else if (hours >= 1 && hours <= 11) {
                        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`; // AM
                    } else {
                        // This shouldn't happen with valid 12h input, but fallback
                        return value;
                    }
                }
                
                return value;
            }

            function formatDate(date) {
                const formatted = date.toLocaleDateString(undefined, { 
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                return formatted;
            }

            function formatTime(time) {
                
                const is12h = getClockFormat() === '12h';
                const formatted = new Date(`2000-01-01T${time}`).toLocaleTimeString(undefined, {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: is12h
                });
                
                return formatted;
            }

            function parseTime(str) {
                const [time, ap] = str.trim().split(' ');
                let [h, m] = time.split(':').map(Number);
                
                if (ap && ap.toUpperCase() === 'PM' && h !== 12) h += 12;
                if (ap && ap.toUpperCase() === 'AM' && h === 12) h = 0;
                
                return { h, m };
            }

            function generateSlotsInRange(startStr, endStr, date) {
                const { h: startH, m: startM } = parseTime(startStr);
                const { h: endH, m: endM } = parseTime(endStr);

                const dayStart = startH * 60 + startM;
                const dayEnd = endH * 60 + endM;

                // Apply buffer times
                const effectiveStart = dayStart + bufferBefore;
                const effectiveEnd = dayEnd - bufferAfter - eventDuration;

                if (effectiveEnd < effectiveStart) {
                    return [];
                }

                const step = 15;
                let currentMinutes = effectiveStart;
                const slots = [];
                
                while (currentMinutes <= effectiveEnd) {
                    const slot = new Date(date);
                    slot.setHours(Math.floor(currentMinutes / 60), currentMinutes % 60, 0, 0);

                    // Apply advance notice
                    if (advanceNotice > 0) {
                        const earliestAllowed = new Date(Date.now() + advanceNotice * 60000);
                        
                        if (slot < earliestAllowed) {
                            currentMinutes += step;
                            continue;
                        }
                    } else if (date.toDateString() === new Date().toDateString()) {
                        // If no advance notice, don't show past times for today
                        const now = new Date();
                        
                        if (slot <= now) {
                            currentMinutes += step;
                            continue;
                        }
                    }

                    // Server handles buffer and booking conflicts, so just add the slot
                    const is12h = getClockFormat() === '12h';
                    const timeStr = slot.toLocaleTimeString(undefined, {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: is12h
                    });
                    slots.push(timeStr);
                    
                    currentMinutes += step;
                }
                
                return slots;
            }

            async function generateTimeSlots(date) {
                const dateStr = date.toISOString().split('T')[0];
                const apiUrl = `${API_URL}/event-types/${event.slug}/slots?date=${dateStr}`;
                
                try {
                    const res = await fetch(apiUrl);
                    
                    if (res.ok) {
                        const data = await res.json();
                        
                        if (data && data.length > 0) {
                            
                            // Convert UTC ISO strings to local time strings
                            const formattedSlots = data.map(iso => {
                                const utcDate = new Date(iso);
                                const is12h = getClockFormat() === '12h';
                                const formattedTime = utcDate.toLocaleTimeString(undefined, {
                                    hour: 'numeric',
                                    minute: '2-digit',
                                    hour12: is12h
                                });
                                
                                return formattedTime;
                                
                                return formattedTime;
                            });
                            
                            return formattedSlots;
                        } else {
                        }
                    } else {
                    }
                } catch (error) {
                }
                
                // Fallback: Generate time slots locally based on weekly hours
                const weeklyHours = JSON.parse(localStorage.getItem('calendarify-weekly-hours') || '{}');
                const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
                const dayName = dayNames[date.getDay()];
                const dayHours = weeklyHours[dayName];
                
                if (dayHours && dayHours.start && dayHours.end) {
                    // Convert local time to UTC for fallback generation
                    const utcStart = convertLocalTimeToUTC(dayHours.start);
                    const utcEnd = convertLocalTimeToUTC(dayHours.end);
                    
                        localStart: dayHours.start,
                        localEnd: dayHours.end,
                        utcStart,
                        utcEnd
                    });
                    
                    const slots = generateSlotsInRange(utcStart, utcEnd, date);
                    return slots;
                } else {
                    // Try to use default hours if none are set (in UTC)
                    const defaultHours = {
                        monday: { start: '07:00', end: '15:00' }, // 9:00-17:00 GMT+2
                        tuesday: { start: '07:00', end: '15:00' },
                        wednesday: { start: '07:00', end: '15:00' },
                        thursday: { start: '07:00', end: '15:00' },
                        friday: { start: '07:00', end: '15:00' }
                    };
                    
                    if (defaultHours[dayName]) {
                        const slots = generateSlotsInRange(defaultHours[dayName].start, defaultHours[dayName].end, date);
                        return slots;
                    }
                    
                    return [];
                }
            }

            // Cache for availability results to avoid repeated API calls
            const availabilityCache = new Map();
            
            // Cache busting function
            function clearAvailabilityCache() {
                availabilityCache.clear();
                            }
            
            // Clear cache on page load to ensure fresh data
            clearAvailabilityCache();

            async function checkDateAvailability(date) {
                    date: date.toISOString(),
                    dateLocal: date.toLocaleDateString(),
                    dayOfWeek: date.getDay(),
                    dayName: ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'][date.getDay()]
                });

                const dateKey = date.toISOString().split('T')[0];
                
                // Create cache key with timestamp to ensure fresh data
                const cacheKey = `${dateKey}-${Date.now()}`;
                
                
                // Check cache first (but with shorter TTL)
                if (availabilityCache.has(dateKey)) {
                    const cached = availabilityCache.get(dateKey);
                    const cacheAge = Date.now() - cached.timestamp;
                    
                        cachedResult: cached.result,
                        cacheAge: cacheAge,
                        cacheAgeSeconds: Math.round(cacheAge / 1000)
                    });
                    
                    // Cache expires after 30 seconds
                    if (cacheAge < 30000) {
                        return cached.result;
                    } else {
                        availabilityCache.delete(dateKey);
                    }
                } else {
                }

                // Check basic availability rules first (using local time)
                const dayNames = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];
                const dayAvail = JSON.parse(localStorage.getItem('calendarify-day-availability') || '{}');
                const dayOfWeek = date.getDay();
                const dayName = dayNames[dayOfWeek];
                const isDayOff = dayAvail[dayName] === false;
                const today = new Date();
                const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
                const isPast = date < todayStart;
                const isWeekend = date.getDay() === 0 || date.getDay() === 6;

                    dayAvail,
                    dayOfWeek,
                    dayName,
                    isDayOff,
                    today: today.toISOString(),
                    todayStart: todayStart.toISOString(),
                    isPast,
                    isWeekend,
                    dateLocal: date.toISOString(),
                    dateDayOfWeek: date.getDay(),
                    dateDayName: dayName
                });

                // If any basic rule fails, no availability
                if (isPast || isWeekend || isDayOff) {
                        isPast,
                        isWeekend,
                        isDayOff,
                        reason: isPast ? 'past date' : isWeekend ? 'weekend' : 'day off'
                    });
                    availabilityCache.set(dateKey, false);
                    return false;
                }


                // Check if there are actual time slots available
                try {
                    const timeSlots = await generateTimeSlots(date);
                    const hasAvailability = timeSlots.length > 0;
                    
                        timeSlotsCount: timeSlots.length,
                        hasAvailability,
                        timeSlots: timeSlots
                    });
                    
                    availabilityCache.set(dateKey, {
                        result: hasAvailability,
                        timestamp: Date.now()
                    });
                    
                    return hasAvailability;
                } catch (e) {
                    console.error('[ERROR] Error checking availability for date:', date, e);
                    availabilityCache.set(dateKey, false);
                    return false;
                }
            }

            // Clear cache when needed (e.g., when availability settings change)
            function clearAvailabilityCache() {
                availabilityCache.clear();
            }

            // Clear cache when a new booking is made to refresh availability
            function refreshAvailabilityAfterBooking() {
                clearAvailabilityCache();
                // If we're currently viewing a date, refresh its availability
                if (selectedDate) {
                    displayTimeSlots();
                }
            }

            // Clear cache on page load to ensure fresh data
            clearAvailabilityCache();

            // Make clearAvailabilityCache available globally for debugging
            window.clearAvailabilityCache = clearAvailabilityCache;
            window.refreshAvailabilityAfterBooking = refreshAvailabilityAfterBooking;
            
            // Real-time settings update listener
            function setupRealtimeUpdates() {
                // Listen for postMessage events from dashboard
                window.addEventListener('message', function(event) {
                    if (event.data && event.data.type === 'SETTINGS_UPDATED') {
                        console.log('[REALTIME] Received settings update:', event.data);
                        clearAvailabilityCache();
                        buildCalendar();
                        console.log('[REALTIME] Calendar refreshed after settings update');
                    }
                });
                
                // Listen for localStorage changes (cross-tab communication)
                window.addEventListener('storage', function(event) {
                    if (event.key === 'calendarify-settings-updated') {
                        try {
                            const data = JSON.parse(event.newValue);
                            console.log('[REALTIME] Received settings update via storage:', data);
                            clearAvailabilityCache();
                            buildCalendar();
                            console.log('[REALTIME] Calendar refreshed after settings update (storage)');
                        } catch (e) {
                            console.error('[REALTIME] Error parsing settings update:', e);
                        }
                    }
                });
                
                // Check for recent settings updates on page load
                const lastUpdate = localStorage.getItem('calendarify-settings-updated');
                if (lastUpdate) {
                    try {
                        const data = JSON.parse(lastUpdate);
                        const age = Date.now() - data.timestamp;
                        if (age < 60000) { // If update was within last minute
                            console.log('[REALTIME] Recent settings update detected, refreshing calendar');
                            clearAvailabilityCache();
                            buildCalendar();
                        }
                    } catch (e) {
                        console.error('[REALTIME] Error checking recent settings update:', e);
                    }
                }
            }
            
            // Setup real-time updates
            setupRealtimeUpdates();

            async function displayTimeSlots() {
                
                const container = document.getElementById('timeSlotsContainer');
                const dateHeader = document.getElementById('selectedDate');
                const timeSlotsDiv = document.getElementById('timeSlots');
                const confirmButton = document.getElementById('confirmButton');
                const mainContainer = document.getElementById('mainContainer');
                
                    container: !!container,
                    dateHeader: !!dateHeader,
                    timeSlotsDiv: !!timeSlotsDiv,
                    confirmButton: !!confirmButton,
                    mainContainer: !!mainContainer
                });
                
                if (!selectedDate) {
                    timeSlotsDiv.classList.remove('show');
                    mainContainer.classList.remove('extended');
                    confirmButton.style.opacity = '0.5';
                    confirmButton.style.pointerEvents = 'none';
                    return;
                }

                    selectedDate: selectedDate.toISOString(),
                    selectedDateLocal: selectedDate.toLocaleDateString(),
                    formattedDate: formatDate(selectedDate)
                });

                dateHeader.textContent = formatDate(selectedDate);
                container.innerHTML = '';

                const dayNames = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];
                const dayAvail = JSON.parse(localStorage.getItem('calendarify-day-availability') || '{}');
                const isDayOff = dayAvail[dayNames[selectedDate.getDay()]] === false;
                const todayStart = new Date(new Date().setHours(0,0,0,0));
                const isPastDate = selectedDate < todayStart;

                    dayAvail,
                    dayOfWeek: selectedDate.getDay(),
                    dayName: dayNames[selectedDate.getDay()],
                    isDayOff,
                    todayStart: todayStart.toISOString(),
                    isPastDate,
                    selectedDateLocal: selectedDate.toISOString()
                });

                if (isPastDate || isDayOff) {
                        isPastDate,
                        isDayOff,
                        reason: isPastDate ? 'past date' : 'day off'
                    });
                    container.innerHTML = '<p class="text-center text-gray-500">No availability</p>';
                    confirmButton.style.opacity = '0.5';
                    confirmButton.style.pointerEvents = 'none';
                } else {
                    let timeSlots = await generateTimeSlots(selectedDate);

                        count: timeSlots.length,
                        slots: timeSlots
                    });

                    if (timeSlots.length === 0) {
                        container.innerHTML = '<p class="text-center text-gray-500">No availability</p>';
                        confirmButton.style.opacity = '0.5';
                        confirmButton.style.pointerEvents = 'none';
                    } else {
                        timeSlots.forEach((time, index) => {
                            const button = document.createElement('button');
                            button.className = 'time-slot w-full text-center py-3 rounded-lg transition-all duration-150 font-medium bg-[#19342e] border border-[#2C4A43] text-[#E0E0E0] hover:bg-[#2C4A43] hover:border-[#34D399] mb-2 show';
                            button.textContent = time;
                            button.style.display = 'block'; // Ensure button is visible
                            button.style.opacity = '1'; // Force visibility
                            button.addEventListener('click', () => {
                                container.querySelectorAll('.time-slot').forEach(slot => slot.classList.remove('selected'));
                                button.classList.add('selected');
                                selectedTime = time;
                                confirmButton.style.opacity = '1';
                                confirmButton.style.pointerEvents = 'auto';
                            });
                            container.appendChild(button);
                        });
                        
                    }
                }

                // Show time slots with animation and move entire container left
                timeSlotsDiv.classList.add('show');
                mainContainer.classList.add('extended');
                
                    timeSlotsDivExists: !!timeSlotsDiv,
                    timeSlotsDivClasses: timeSlotsDiv ? timeSlotsDiv.className : 'N/A',
                    timeSlotsDivStyle: timeSlotsDiv ? timeSlotsDiv.style.cssText : 'N/A',
                    mainContainerClasses: mainContainer ? mainContainer.className : 'N/A',
                    containerChildren: container ? container.children.length : 'N/A'
                });
                
                // Animate time slots appearing
                setTimeout(() => {
                    container.querySelectorAll('.time-slot').forEach(slot => {
                        slot.classList.add('show');
                    });
                }, 100);
            }

            async function buildCalendar() {
                
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
                
                    currentDate: currentDate.toISOString(),
                    year,
                    month,
                    firstDay: firstDay.toISOString(),
                    lastDay: lastDay.toISOString(),
                    daysInMonth: lastDay.getDate()
                });
                
                document.getElementById('currentMonth').textContent = 
                    firstDay.toLocaleDateString(undefined, { month: 'long', year: 'numeric' });
                
                const calendarEl = document.getElementById('calendar');
                calendarEl.innerHTML = '';
                
                
                // Add day names
                dayNames.forEach(day => {
                    const div = document.createElement('div');
                    div.className = 'calendar-day-name';
                    div.textContent = day;
                    calendarEl.appendChild(div);
                });
                
                // Add empty cells for days before the first day of the month
                const emptyCells = firstDay.getDay();
                
                for (let i = 0; i < emptyCells; i++) {
                    const div = document.createElement('div');
                    div.className = 'calendar-day empty';
                    calendarEl.appendChild(div);
                }
                
                const availabilityChecks = [];
                const dayElements = [];
                
                // Get day availability settings
                const dayAvail = JSON.parse(localStorage.getItem('calendarify-day-availability') || '{}');
                const dayNamesFull = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];
                
                
                // Add days of the month
                
                for (let day = 1; day <= lastDay.getDate(); day++) {
                    const date = new Date(year, month, day);
                    const dayOfWeek = date.getDay();
                    const dayName = dayNamesFull[dayOfWeek];
                    const isDayOff = dayAvail[dayName] === false;
                    
                        date: date.toISOString(),
                        dayOfWeek,
                        dayName,
                        isDayOff
                    });
                    
                    const div = document.createElement('div');
                    div.className = 'calendar-day';
                    div.textContent = day;
                    
                    // Check if it's today
                    const today = new Date();
                    if (date.toDateString() === today.toDateString()) {
                        div.classList.add('today');
                    }
                    
                    // Check if it's selected
                    if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                        div.classList.add('selected');
                    }
                    
                    // Basic availability check (past dates, weekends, day off)
                    const isPast = date < new Date(new Date().setHours(0,0,0,0));
                    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
                    
                    if (isPast || isWeekend || isDayOff) {
                            isPast,
                            isWeekend,
                            isDayOff,
                            result: 'unavailable'
                        });
                        div.classList.add('unavailable');
                    } else {
                        // For available days, we'll check actual time slots later
                        availabilityChecks.push({ date, element: div, day });
                    }
                    
                    div.addEventListener('click', () => {
                        if (!div.classList.contains('unavailable')) {
                            selectDate(date);
                        }
                    });
                    
                    calendarEl.appendChild(div);
                    dayElements.push(div);
                }
                
                // Check availability for remaining days in parallel
                
                const availabilityResults = await Promise.all(
                    availabilityChecks.map(async ({ date, element, day }) => {
                        const isAvailable = await checkDateAvailability(date);
                        return { element, isAvailable };
                    })
                );
                
                // Apply availability results
                availabilityResults.forEach(({ element, isAvailable }) => {
                    if (!isAvailable) {
                        element.classList.add('unavailable');
                    }
                });
                
            }
            
            // Make buildCalendar globally accessible
            window.buildCalendar = buildCalendar;

            // Function to handle date selection
            function selectDate(date) {
                
                // Remove previous selection
                document.querySelectorAll('.calendar-day').forEach(day => {
                    day.classList.remove('selected');
                });
                
                // Add selection to clicked day
                const dayElements = document.querySelectorAll('.calendar-day');
                const dayNumber = date.getDate();
                const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
                const emptyCells = firstDayOfMonth.getDay();
                const dayIndex = emptyCells + dayNumber - 1;
                
                if (dayElements[dayIndex]) {
                    dayElements[dayIndex].classList.add('selected');
                }
                
                selectedDate = date;
                
                // Display time slots for the selected date
                displayTimeSlots();
            }
            
            // Make selectDate globally accessible
            window.selectDate = selectDate;

            function showBookingModal() {
                // Debug: Log the event data to see what we're working with
                                                
                // Populate modal with booking details
                document.getElementById('modalEventTitle').textContent = event.title || event.name;
                document.getElementById('modalEventDate').textContent = formatDate(selectedDate);
                document.getElementById('modalEventTime').textContent = selectedTime;
                document.getElementById('modalEventDuration').textContent = `${eventDuration} minutes`;

                // Show/hide required fields based on questions
                const questions = event.questions || [];
                                
                // Reset all fields to hidden first
                document.getElementById('nameField').classList.add('hidden');
                document.getElementById('emailField').classList.add('hidden');
                document.getElementById('phoneField').classList.add('hidden');
                document.getElementById('companyField').classList.add('hidden');
                
                // Hide contact info section initially
                document.getElementById('contactInfoSection').classList.add('hidden');
                
                // Show fields based on questions and update labels
                let hasContactFields = false;
                const fieldRequirements = {};
                
                questions.forEach(questionObj => {
                    const questionText = questionObj.text.toLowerCase();
                    if (questionText.includes('name') || questionText.includes('full name')) {
                        document.getElementById('nameField').classList.remove('hidden');
                        fieldRequirements.name = questionObj.required;
                        hasContactFields = true;
                    } else if (questionText.includes('email') || questionText.includes('email address')) {
                        document.getElementById('emailField').classList.remove('hidden');
                        fieldRequirements.email = questionObj.required;
                        hasContactFields = true;
                    } else if (questionText.includes('phone') || questionText.includes('phone number')) {
                        document.getElementById('phoneField').classList.remove('hidden');
                        fieldRequirements.phone = questionObj.required;
                        hasContactFields = true;
                    } else if (questionText.includes('company') || questionText.includes('work for')) {
                        document.getElementById('companyField').classList.remove('hidden');
                        fieldRequirements.company = questionObj.required;
                        hasContactFields = true;
                    }
                });
                
                // Update field labels to show required indicators
                if (fieldRequirements.name !== undefined) {
                    const nameLabel = document.querySelector('#nameField label');
                    nameLabel.textContent = fieldRequirements.name ? 'Name *' : 'Name';
                }
                if (fieldRequirements.email !== undefined) {
                    const emailLabel = document.querySelector('#emailField label');
                    emailLabel.textContent = fieldRequirements.email ? 'Email *' : 'Email';
                }
                if (fieldRequirements.phone !== undefined) {
                    const phoneLabel = document.querySelector('#phoneField label');
                    phoneLabel.textContent = fieldRequirements.phone ? 'Phone Number *' : 'Phone Number';
                }
                if (fieldRequirements.company !== undefined) {
                    const companyLabel = document.querySelector('#companyField label');
                    companyLabel.textContent = fieldRequirements.company ? 'Company *' : 'Company';
                }
                
                // Show contact info section if there are contact fields
                if (hasContactFields) {
                    document.getElementById('contactInfoSection').classList.remove('hidden');
                }

                // Handle additional custom questions
                const customQuestions = questions.filter(q => {
                    const text = q.text.toLowerCase();
                    return !text.includes('name') && !text.includes('email') && 
                           !text.includes('phone') && !text.includes('company');
                });
                
                if (customQuestions.length > 0) {
                                        const questionsContainer = document.getElementById('questionsContainer');
                    questionsContainer.innerHTML = '';
                    
                    customQuestions.forEach((questionObj, index) => {
                        const questionDiv = document.createElement('div');
                        const requiredText = questionObj.required ? ' *' : '';
                        questionDiv.innerHTML = `
                            <label class="block text-[#A3B3AF] text-sm font-medium mb-2">${questionObj.text}${requiredText}</label>
                            <textarea id="custom_question_${index}" class="w-full bg-[#19342e] border border-[#2C4A43] text-[#E0E0E0] rounded-lg px-4 py-3 focus:border-[#34D399] focus:ring-2 focus:ring-[#34D399] transition-colors resize-none" rows="3" placeholder="Your answer"></textarea>
                        `;
                        questionsContainer.appendChild(questionDiv);
                    });
                    document.getElementById('questionsSection').classList.remove('hidden');
                                    } else {
                    document.getElementById('questionsSection').classList.add('hidden');
                                    }

                // Show modal
                document.getElementById('bookingModal').classList.remove('hidden');
            }

            function closeBookingModal() {
                document.getElementById('bookingModal').classList.add('hidden');
                
                // Reset form fields to hidden
                document.getElementById('nameField').classList.add('hidden');
                document.getElementById('emailField').classList.add('hidden');
                document.getElementById('phoneField').classList.add('hidden');
                document.getElementById('companyField').classList.add('hidden');
                document.getElementById('contactInfoSection').classList.add('hidden');
                document.getElementById('questionsSection').classList.add('hidden');
                
                // Clear form values
                document.getElementById('bookingName').value = '';
                document.getElementById('bookingEmail').value = '';
                document.getElementById('bookingPhone').value = '';
                document.getElementById('bookingCompany').value = '';
                document.getElementById('questionsContainer').innerHTML = '';
            }

            // Real-time validation feedback
            function setupRealTimeValidation() {
                const emailInput = document.getElementById('bookingEmail');
                const phoneInput = document.getElementById('bookingPhone');
                const emailError = document.getElementById('emailError');
                const phoneError = document.getElementById('phoneError');
                
                if (emailInput) {
                    emailInput.addEventListener('input', function() {
                        const value = this.value.trim();
                        // Only show error if there's a value and it's invalid
                        if (value && !isValidEmail(value)) {
                            this.classList.add('border-red-500');
                            this.classList.remove('border-[#2C4A43]');
                            if (emailError) emailError.classList.remove('hidden');
                        } else {
                            this.classList.remove('border-red-500');
                            this.classList.add('border-[#2C4A43]');
                            if (emailError) emailError.classList.add('hidden');
                        }
                    });
                }
                
                if (phoneInput) {
                    phoneInput.addEventListener('input', function() {
                        const value = this.value.trim();
                        // Only show error if there's a value and it's invalid
                        if (value && !isValidPhoneNumber(value)) {
                            this.classList.add('border-red-500');
                            this.classList.remove('border-[#2C4A43]');
                            if (phoneError) phoneError.classList.remove('hidden');
                        } else {
                            this.classList.remove('border-red-500');
                            this.classList.add('border-[#2C4A43]');
                            if (phoneError) phoneError.classList.add('hidden');
                        }
                    });
                }
            }

            // Validation functions
            function isValidEmail(email) {
                if (!email || email.trim() === '') return true; // Empty is valid for optional fields
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(email.trim());
            }

            function isValidPhoneNumber(phone) {
                if (!phone || phone.trim() === '') return true; // Empty is valid for optional fields
                // Remove all non-digit characters for validation
                const digitsOnly = phone.replace(/\D/g, '');
                // Check if it has 7-15 digits (common phone number lengths)
                return digitsOnly.length >= 7 && digitsOnly.length <= 15;
            }

            function validateBookingForm() {
                const questions = event.questions || [];
                const errors = [];
                
                // Create a map of field types and their required status
                const fieldRequirements = {};
                questions.forEach(questionObj => {
                    const questionText = questionObj.text.toLowerCase();
                    if (questionText.includes('name') || questionText.includes('full name')) {
                        fieldRequirements.name = questionObj.required;
                    } else if (questionText.includes('email') || questionText.includes('email address')) {
                        fieldRequirements.email = questionObj.required;
                    } else if (questionText.includes('phone') || questionText.includes('phone number')) {
                        fieldRequirements.phone = questionObj.required;
                    } else if (questionText.includes('company') || questionText.includes('work for')) {
                        fieldRequirements.company = questionObj.required;
                    }
                });
                
                // Validate each field based on its requirement
                if (fieldRequirements.name !== undefined) {
                    const nameValue = document.getElementById('bookingName').value.trim();
                    if (fieldRequirements.name && !nameValue) {
                        errors.push('Please enter your name');
                    }
                }
                
                if (fieldRequirements.email !== undefined) {
                    const emailValue = document.getElementById('bookingEmail').value.trim();
                    if (fieldRequirements.email && !emailValue) {
                        errors.push('Please enter your email address');
                    } else if (emailValue && !isValidEmail(emailValue)) {
                        errors.push('Please enter a valid email address');
                    }
                }
                
                if (fieldRequirements.phone !== undefined) {
                    const phoneValue = document.getElementById('bookingPhone').value.trim();
                    if (fieldRequirements.phone && !phoneValue) {
                        errors.push('Please enter your phone number');
                    } else if (phoneValue && !isValidPhoneNumber(phoneValue)) {
                        errors.push('Please enter a valid phone number');
                    }
                }
                
                if (fieldRequirements.company !== undefined) {
                    const companyValue = document.getElementById('bookingCompany').value.trim();
                    if (fieldRequirements.company && !companyValue) {
                        errors.push('Please enter your company name');
                    }
                }
                
                // Validate required custom questions
                const customQuestions = questions.filter(q => {
                    const text = q.text.toLowerCase();
                    return !text.includes('name') && !text.includes('email') && 
                           !text.includes('phone') && !text.includes('company');
                });
                
                for (let i = 0; i < customQuestions.length; i++) {
                    const questionObj = customQuestions[i];
                    if (questionObj.required) {
                        const answer = document.getElementById(`custom_question_${i}`).value.trim();
                        if (!answer) {
                            errors.push(`Please answer the required question: ${questionObj.text}`);
                        }
                    }
                }
                
                // Show errors if any
                if (errors.length > 0) {
                    showValidationErrors(errors);
                    return false;
                }
                
                return true;
            }

            function showValidationErrors(errors) {
                // Remove any existing error modal
                const existingErrorModal = document.getElementById('validationErrorModal');
                if (existingErrorModal) {
                    existingErrorModal.remove();
                }
                
                // Create error modal
                const errorModal = document.createElement('div');
                errorModal.id = 'validationErrorModal';
                errorModal.className = 'fixed inset-0 z-[80] flex items-center justify-center p-4';
                errorModal.innerHTML = `
                    <div class="bg-[#1E3A34] rounded-xl shadow-2xl p-8 max-w-md w-full mx-4 border border-[#EF4444]">
                        <div class="text-center">
                            <!-- Error Icon -->
                            <div class="mx-auto w-16 h-16 bg-[#EF4444] rounded-full flex items-center justify-center mb-6">
                                <span class="material-icons-outlined text-white text-3xl">error</span>
                            </div>
                            
                            <!-- Error Message -->
                            <h3 class="text-xl font-bold text-white mb-4">Please fix the following errors:</h3>
                            
                            <!-- Error List -->
                            <div class="bg-[#19342e] rounded-lg p-4 mb-6 text-left">
                                <ul class="space-y-2">
                                    ${errors.map(error => `<li class="text-[#FCA5A5] flex items-start">
                                        <span class="material-icons-outlined text-[#EF4444] mr-2 mt-0.5 text-sm">circle</span>
                                        ${error}
                                    </li>`).join('')}
                                </ul>
                            </div>
                            
                            <!-- Action Button -->
                            <button id="validationErrorOkButton" class="bg-[#EF4444] text-white px-8 py-3 rounded-lg hover:bg-[#DC2626] transition-colors font-bold w-full">
                                OK
                            </button>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(errorModal);
                
                // Add event listener for OK button
                const okButton = errorModal.querySelector('#validationErrorOkButton');
                if (okButton) {
                    okButton.addEventListener('click', closeValidationErrorModal);
                }
                
                // Close modal when clicking backdrop
                errorModal.addEventListener('click', (e) => {
                    if (e.target === errorModal) {
                        closeValidationErrorModal();
                    }
                });
            }

            function closeValidationErrorModal() {
                const errorModal = document.getElementById('validationErrorModal');
                if (errorModal) {
                    errorModal.remove();
                }
            }

            async function confirmBooking() {
                if (!validateBookingForm()) return;
                
                // Collect form data
                const bookingData = {
                    eventTitle: event.title || event.name,
                    date: formatDate(selectedDate),
                    time: selectedTime,
                    duration: eventDuration,
                    name: document.getElementById('bookingName').value,
                    email: document.getElementById('bookingEmail').value,
                    phone: document.getElementById('bookingPhone').value,
                    company: document.getElementById('bookingCompany').value,
                    questions: []
                };

                // Collect custom question answers
                const questions = event.questions || [];
                const customQuestions = questions.filter(q => {
                    const text = q.text.toLowerCase();
                    return !text.includes('name') && !text.includes('email') && 
                           !text.includes('phone') && !text.includes('company');
                });
                
                if (customQuestions.length > 0) {
                    customQuestions.forEach((questionObj, index) => {
                        const answer = document.getElementById(`custom_question_${index}`).value;
                        bookingData.questions.push({ question: questionObj.text, answer });
                    });
                }

                // Create the actual booking in the database
                try {
                    // Get slug and display from the same logic used at page load
                    const parts = window.location.pathname.split('/').filter(Boolean);
                    let display = '';
                    let slug = '';
                    if (parts.length >= 3 && parts[0] === 'booking') {
                        display = decodeURIComponent(parts[1]);
                        slug = parts[2];
                    } else {
                        const urlParams = new URLSearchParams(window.location.search);
                        display = urlParams.get('user') || '';
                        slug = urlParams.get('event') || '';
                    }
                    
                    console.log('URL params:', {
                        slug: slug,
                        display: display,
                        fullUrl: window.location.href,
                        search: window.location.search,
                        pathname: window.location.pathname
                    });
                    
                    if (!slug) {
                        showValidationErrors(['Invalid booking link. Missing event type.']);
                        return;
                    }
                    
                    // Calculate start and end times
                    // Parse the selected time (format: "10:00 AM" or "14:00")
                    let startTime = new Date(selectedDate);
                    let timeStr = selectedTime;
                    
                    // Convert 12-hour format to 24-hour if needed
                    if (timeStr.includes('AM') || timeStr.includes('PM')) {
                        const [time, period] = timeStr.split(' ');
                        let [hours, minutes] = time.split(':').map(Number);
                        
                        if (period === 'PM' && hours !== 12) {
                            hours += 12;
                        } else if (period === 'AM' && hours === 12) {
                            hours = 0;
                        }
                        
                        startTime.setHours(hours, minutes, 0, 0);
                    } else {
                        const [hours, minutes] = timeStr.split(':').map(Number);
                        startTime.setHours(hours, minutes, 0, 0);
                    }
                    
                    const endTime = new Date(startTime);
                    endTime.setMinutes(endTime.getMinutes() + eventDuration);
                    
                    const bookingPayload = {
                        event_type_slug: slug,
                        name: bookingData.name,
                        email: bookingData.email,
                        phone: bookingData.phone || null,
                        company: bookingData.company || null,
                        starts_at: startTime.toISOString(),
                        ends_at: endTime.toISOString(),
                        questions: bookingData.questions
                    };
                    
                    console.log('API URL:', `${API_URL}/bookings`);
                    console.log('Booking payload:', JSON.stringify(bookingPayload, null, 2));
                    
                    console.log('Creating booking with payload:', bookingPayload);
                    
                    // Create booking on the server
                    console.log('Creating booking on server');
                    
                    const res = await fetch(`${API_URL}/bookings`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(bookingPayload)
                    });
                    
                    if (res.ok) {
                        const createdBooking = await res.json();
                        console.log('Booking created successfully:', createdBooking);
                        showBookingConfirmationModal(bookingData);
                    } else {
                        const errorData = await res.json();
                        console.error('Failed to create booking:', errorData);
                        console.error('Response status:', res.status);
                        
                        // Show more specific error message
                        let errorMessage = 'Failed to create booking. Please try again.';
                        if (errorData && errorData.message) {
                            errorMessage = `Booking failed: ${errorData.message}`;
                        } else if (errorData && errorData.error) {
                            errorMessage = `Booking failed: ${errorData.error}`;
                        }
                        
                        showValidationErrors([errorMessage]);
                    }
                } catch (error) {
                    console.error('Error creating booking:', error);
                    showValidationErrors(['Failed to create booking. Please try again.']);
                }
            }

            function showBookingConfirmationModal(bookingData) {
                // Populate confirmation modal with booking details
                document.getElementById('confirmationEventTitle').textContent = bookingData.eventTitle;
                document.getElementById('confirmationDate').textContent = bookingData.date;
                document.getElementById('confirmationTime').textContent = bookingData.time;
                document.getElementById('confirmationDuration').textContent = `${bookingData.duration} minutes`;
                
                // Close the booking modal first
                closeBookingModal();
                
                // Show the confirmation modal
                document.getElementById('bookingConfirmationModal').classList.remove('hidden');
            }

            function closeBookingConfirmationModal() {
                document.getElementById('bookingConfirmationModal').classList.add('hidden');
            }

            // Event listeners
            document.getElementById('prevMonth').addEventListener('click', async () => {
                const oldDate = new Date(currentDate);
                currentDate.setMonth(currentDate.getMonth() - 1);
                    from: oldDate.toISOString(),
                    to: currentDate.toISOString()
                });
                await buildCalendar();
            });

            document.getElementById('nextMonth').addEventListener('click', async () => {
                const oldDate = new Date(currentDate);
                currentDate.setMonth(currentDate.getMonth() + 1);
                    from: oldDate.toISOString(),
                    to: currentDate.toISOString()
                });
                await buildCalendar();
            });

            document.getElementById('confirmButton').addEventListener('click', () => {
                if (selectedDate && selectedTime) {
                    showBookingModal();
                }
            });

            // Modal button event listeners
            document.getElementById('closeBookingModal').addEventListener('click', closeBookingModal);
            document.getElementById('cancelBooking').addEventListener('click', closeBookingModal);
            document.getElementById('confirmBooking').addEventListener('click', confirmBooking);
            document.getElementById('closeBookingConfirmationModal').addEventListener('click', closeBookingConfirmationModal);

            // Close modal when clicking backdrop
            document.getElementById('bookingModal').addEventListener('click', (e) => {
                if (e.target === document.getElementById('bookingModal')) {
                    closeBookingModal();
                }
            });

            // Close confirmation modal when clicking backdrop
            document.getElementById('bookingConfirmationModal').addEventListener('click', (e) => {
                if (e.target === document.getElementById('bookingConfirmationModal')) {
                    closeBookingConfirmationModal();
                }
            });

            // Initialize the calendar
            buildCalendar().catch(console.error);
            
            // Initialize time format toggle
            updateClockFormatUI();
            
            // Setup real-time validation
            setupRealTimeValidation();

            // Test function for debugging time slot generation
            window.testTimeSlotGeneration = function() {
                const weeklyHours = JSON.parse(localStorage.getItem('calendarify-weekly-hours') || '{}');
                
                // Test with Friday (5)
                const testDate = new Date();
                testDate.setDate(testDate.getDate() + (5 - testDate.getDay() + 7) % 7); // Next Friday
                
                const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
                const dayName = dayNames[testDate.getDay()];
                const dayHours = weeklyHours[dayName];
                
                if (dayHours && dayHours.start && dayHours.end) {
                    const slots = generateSlotsInRange(dayHours.start, dayHours.end, testDate);
                } else {
                    const slots = generateSlotsInRange('09:00', '17:00', testDate);
                }
            };

            window.testFallbackGeneration = function() {
                const weeklyHours = JSON.parse(localStorage.getItem('calendarify-weekly-hours') || '{}');
                
                // Test with Friday (5)
                const testDate = new Date();
                testDate.setDate(testDate.getDate() + (5 - testDate.getDay() + 7) % 7); // Next Friday
                
                const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
                const dayName = dayNames[testDate.getDay()];
                const dayHours = weeklyHours[dayName];
                
                if (dayHours && dayHours.start && dayHours.end) {
                    const utcStart = convertLocalTimeToUTC(dayHours.start);
                    const utcEnd = convertLocalTimeToUTC(dayHours.end);
                    
                        localStart: dayHours.start,
                        localEnd: dayHours.end,
                        utcStart,
                        utcEnd
                    });
                    
                    const slots = generateSlotsInRange(utcStart, utcEnd, testDate);
                } else {
                    const slots = generateSlotsInRange('07:00', '15:00', testDate);
                }
            };

            // Function to reload user state from backend
            window.reloadUserState = async function() {
                try {
                    // Get the event type's user display name from the event object
                    const displayName = event.user_display_name || 'admin';
                    const response = await fetch(`http://localhost:3001/api/users/display/${displayName}/state`);
                    
                    if (response.ok) {
                        const backendState = await response.json();
                        const freshWeeklyHours = backendState['calendarify-weekly-hours'] || {};
                        const freshDayAvailability = backendState['calendarify-day-availability'] || {};
                        
                            weeklyHours: freshWeeklyHours, 
                            dayAvailability: freshDayAvailability 
                        });
                        
                        // Update localStorage with fresh data
                        localStorage.setItem('calendarify-weekly-hours', JSON.stringify(freshWeeklyHours));
                        localStorage.setItem('calendarify-day-availability', JSON.stringify(freshDayAvailability));
                        
                        // Refresh the calendar
                        await buildCalendar();
                    } else {
                        console.error('[DEBUG] Failed to fetch user state:', response.status, response.statusText);
                    }
                } catch (error) {
                    console.error('[DEBUG] Failed to reload user state:', error);
                }
            };

            // Add debug buttons
            const debugContainer = document.createElement('div');
            debugContainer.className = 'fixed top-4 right-4 z-50 space-y-2';
            debugContainer.innerHTML = `
                <button onclick="window.reloadUserState()" class="bg-blue-500 text-white px-3 py-1 rounded text-sm">🔄 Reload User State</button>
                <button onclick="console.log('calendarify-weekly-hours:', localStorage.getItem('calendarify-weekly-hours')); console.log('calendarify-day-availability:', localStorage.getItem('calendarify-day-availability'));" class="bg-green-500 text-white px-3 py-1 rounded text-sm">📋 Log localStorage</button>
                <button onclick="window.buildCalendar()" class="bg-yellow-500 text-white px-3 py-1 rounded text-sm">📅 Refresh Calendar</button>
                <button onclick="window.testTimeSlotGeneration()" class="bg-purple-500 text-white px-3 py-1 rounded text-sm">🧪 Test Time Slots</button>
                <button onclick="window.testFallbackGeneration()" class="bg-red-500 text-white px-3 py-1 rounded text-sm">🔧 Test Fallback</button>
                <button onclick="clearAvailabilityCache(); buildCalendar();" class="bg-orange-500 text-white px-3 py-1 rounded text-sm">🔄 Clear Cache & Refresh</button>
            `;
            document.body.appendChild(debugContainer);
        });
    </script>
</body>
</html>
